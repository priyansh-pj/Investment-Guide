{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshjain/Programming/react/Investment Guide/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/UI/Header';\nimport CalculatorForm from './components/Calculator/CalculatorForm';\nimport IntrestTable from './components/InterestTable/InterestTable';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [s, setYearlyData] = useState([]);\n  const calculateHandler = userInput => {\n    console.log('Calculator is tringeer with ', userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log(yearlyData);\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorForm, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SBOs07Mk08SypsqtBYojCKaN420=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","CalculatorForm","IntrestTable","useState","jsxDEV","_jsxDEV","App","_s","s","setYearlyData","calculateHandler","userInput","console","log","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","yearlyData","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["/Users/priyanshjain/Programming/react/Investment Guide/src/App.js"],"sourcesContent":["\nimport Header from './components/UI/Header';\nimport CalculatorForm from './components/Calculator/CalculatorForm';\nimport IntrestTable from './components/InterestTable/InterestTable';\nimport { useState } from 'react';\n\n\nfunction App() {\n  const [s,setYearlyData] = useState([]);\n  const calculateHandler = (userInput) => {\n    console.log('Calculator is tringeer with ',userInput)\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    console.log(yearlyData)\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n\n      <Header/>\n      <CalculatorForm onCalculate={calculateHandler}/>\n\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,YAAY,MAAM,0CAA0C;AACnE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,CAAC,EAACC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMO,gBAAgB,GAAIC,SAAS,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAACF,SAAS,CAAC;IACrD;IACA;;IAIA,IAAIG,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDK,UAAU,CAACC,IAAI,CAAC;QACd;QACAC,IAAI,EAAEJ,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BI,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IAEAH,OAAO,CAACC,GAAG,CAACO,UAAU,CAAC;;IAEvB;EACF,CAAC;;EAED,oBACEf,OAAA;IAAAmB,QAAA,gBAEEnB,OAAA,CAACL,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTvB,OAAA,CAACJ,cAAc;MAAC4B,WAAW,EAAEnB;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAO7C,CAAC;AAEV;AAACrB,EAAA,CA7CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}