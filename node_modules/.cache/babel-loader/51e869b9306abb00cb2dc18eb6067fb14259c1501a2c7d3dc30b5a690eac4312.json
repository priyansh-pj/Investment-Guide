{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshjain/Programming/react/Investment Guide/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/UI/Header\";\nimport CalculatorForm from \"./components/Calculator/CalculatorForm\";\nimport IntrestTable from \"./components/InterestTable/InterestTable\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [yearlyData, setYearlyData] = useState([]);\n  const calculateHandler = userInput => {\n    console.log(\"Calculator is tringeer with \", userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      console.log(i, yearlyInterest, currentSavings, yearlyContribution);\n      setYearlyData(previous => [...previous, {\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      }]);\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorForm, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L2hTGYim4KbKSMBTHo5ostNJKu4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","CalculatorForm","IntrestTable","useState","jsxDEV","_jsxDEV","App","_s","yearlyData","setYearlyData","calculateHandler","userInput","console","log","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","previous","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["/Users/priyanshjain/Programming/react/Investment Guide/src/App.js"],"sourcesContent":["import Header from \"./components/UI/Header\";\nimport CalculatorForm from \"./components/Calculator/CalculatorForm\";\nimport IntrestTable from \"./components/InterestTable/InterestTable\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [yearlyData, setYearlyData] = useState([]);\n  const calculateHandler = (userInput) => {\n    console.log(\"Calculator is tringeer with \", userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      console.log(i,yearlyInterest,currentSavings,yearlyContribution)\n      setYearlyData((previous) => [\n        ...previous,\n        {\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        },\n      ]);\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <CalculatorForm onCalculate={calculateHandler} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,YAAY,MAAM,0CAA0C;AACnE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMO,gBAAgB,GAAIC,SAAS,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,SAAS,CAAC;IACtD;IACA;;IAEA,IAAIG,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDH,OAAO,CAACC,GAAG,CAACK,CAAC,EAACC,cAAc,EAACL,cAAc,EAACC,kBAAkB,CAAC;MAC/DN,aAAa,CAAEW,QAAQ,IAAK,CAC1B,GAAGA,QAAQ,EACX;QACEC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CACF,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEV,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACL,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVtB,OAAA,CAACJ,cAAc;MAAC2B,WAAW,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAI9C,CAAC;AAEV;AAACpB,EAAA,CAxCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}